{"version":3,"file":"light-print.umd.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const isIE = () => /msie|trident/i.test(window.navigator.userAgent);\n\nexport const isString = (val: unknown): val is string => typeof val === 'string';\nexport const isNode = (target: unknown): target is Node => target instanceof Node;\n\nexport const appendNode = <T extends Node>(parent: T, child: T) => parent.appendChild(child);\n\nexport const importNode = <T extends Node>(document: Document, node: T): T => document.importNode(node, true);\n\nexport const removeNode = <T extends Node>(node: T) => node.parentNode?.removeChild(node);\n\nconst SHOW_ELEMENT = window.NodeFilter.SHOW_ELEMENT;\nexport const createNodeIterator = (root: Node, filter?: NodeFilter) =>\n  window.document.createNodeIterator(root, SHOW_ELEMENT, filter);\n\n/** clone element style */\nexport const cloneStyle = <T extends Element>(target: T, origin: T) => {\n  const style = window.getComputedStyle(origin, null);\n  target.setAttribute('style', style.cssText);\n};\n\nexport const setProperty = <T extends ElementCSSInlineStyle>(\n  target: T,\n  propertyName: string,\n  value: number | string,\n  priority?: string\n) => {\n  target.style.setProperty(propertyName, String(value), priority);\n};\n\nexport const getDocument = (target: HTMLIFrameElement) => target.contentWindow?.document ?? target.contentDocument;\n\nexport const getNode = (containerOrSelector: unknown): Node | undefined => {\n  if (isNode(containerOrSelector)) return containerOrSelector;\n\n  if (isString(containerOrSelector)) {\n    const dom = window.document.querySelector(containerOrSelector);\n    if (dom) return dom;\n  }\n};\n\nexport const bindOnceEvent = <T extends EventTarget, K extends keyof WindowEventMap>(\n  el: T,\n  eventName: K,\n  listener: (event: WindowEventMap[K]) => void,\n  options?: AddEventListenerOptions | boolean\n) => {\n  const wrappedListener: EventListener = event => {\n    listener(event as WindowEventMap[K]);\n    el.removeEventListener(eventName, wrappedListener, options);\n  };\n\n  el.addEventListener(eventName, wrappedListener, options);\n};\n","import {\n  isIE,\n  appendNode,\n  importNode,\n  removeNode,\n  createNodeIterator,\n  getNode,\n  cloneStyle,\n  getDocument,\n  setProperty,\n  bindOnceEvent,\n} from './utils';\n\ninterface Options {\n  documentTitle: string;\n  mediaPrintStyle: string;\n  zoom: number | string;\n}\n\nexport type PrintOptions = Partial<Options>;\n\nconst createContainer = (documentTitle: PrintOptions['documentTitle']): HTMLIFrameElement => {\n  const container = window.document.createElement('iframe');\n  const hidden = 'position: absolute; height: 0; width: 0; visibility: hidden;';\n  container.setAttribute('style', hidden);\n  const title = documentTitle ?? window.document.title;\n  container.setAttribute('srcdoc', `<html><head><title>${title}</title></head></html>`);\n  return container;\n};\n\nconst createStyleNode = (style: string): HTMLStyleElement => {\n  const node = window.document.createElement('style');\n  node.innerHTML = `@media print {${style}}`;\n  return node;\n};\n\n/** 复制需要打印的 DOM 元素的所有样式 */\nconst cloneDocumentStyle = (printDocument: Document, dom: Node) => {\n  const originIterator = createNodeIterator(dom);\n  // start from `body`\n  const printIterator = createNodeIterator(printDocument.body);\n\n  let node = printIterator.nextNode();\n  while (node) {\n    node = printIterator.nextNode();\n    const originNode = originIterator.nextNode();\n    if (originNode && node) cloneStyle(node as Element, originNode as Element);\n  }\n};\n\n/** reset html zoom */\nconst setDocumentZoom = (document: Document, zoom: number | string = 1) => {\n  setProperty(document.documentElement, 'zoom', zoom);\n};\n\nconst loadContainer = <T extends Node | string = string>(title: PrintOptions['documentTitle']) =>\n  new Promise<HTMLIFrameElement>((resolve, reject) => {\n    const container = createContainer(title);\n    appendNode(window.document.body, container);\n    bindOnceEvent(container, 'load', () => resolve(container));\n    bindOnceEvent(container, 'error', () => reject(new Error('Failed to load document')));\n  });\n\nconst performPrint = (container: HTMLIFrameElement) =>\n  new Promise<void>((resolve, reject) => {\n    // required for IE\n    container.focus();\n    const contentWindow = container.contentWindow;\n    if (!contentWindow) return reject(new Error('Not found window'));\n    if (isIE()) {\n      try {\n        contentWindow.document.execCommand('print', false);\n      } catch {\n        contentWindow.print();\n      }\n    } else {\n      contentWindow.print();\n    }\n\n    bindOnceEvent(contentWindow, 'afterprint', () => {\n      resolve();\n      /** destroy window */\n      contentWindow.close();\n      removeNode(container);\n    });\n  });\n\nconst lightPrint = async <T extends Node | string>(containerOrSelector: T, options: PrintOptions = {}) => {\n  const dom = getNode(containerOrSelector);\n  if (!dom) throw new Error('Invalid HTML element');\n\n  const container = await loadContainer(options.documentTitle);\n  const printDocument = getDocument(container);\n  if (!printDocument) throw new Error('Not found document');\n\n  setDocumentZoom(printDocument, options.zoom);\n\n  if (options.mediaPrintStyle) {\n    const styleNode = createStyleNode(options.mediaPrintStyle);\n    appendNode(printDocument.head, styleNode);\n  }\n\n  appendNode(printDocument.body, importNode(printDocument, dom));\n  cloneDocumentStyle(printDocument, dom);\n  /** run print handler */\n  await performPrint(container);\n};\n\nexport default lightPrint;\n"],"names":[],"mappings":";;;;;;;;;;;;;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;EACA;;EAEA;AACA;EACA;;EAEA;EACA;EACA;AACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;AAEA;;EAEA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;;uGCzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;EAEA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;;;;;;;;"}