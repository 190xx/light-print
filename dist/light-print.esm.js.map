{"version":3,"file":"light-print.esm.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const isIE = () => window.navigator.userAgent.toLowerCase().indexOf('msie') !== -1 || !!window.StyleMedia;\nexport const isNode = (target: unknown): target is Node => target instanceof Node;\n\nexport const appendNode = <T extends Node>(parent: T, child: T) => parent.appendChild(child);\n\nexport const importNode = <T extends Node>(document: Document, node: T): T => document.importNode(node, true);\n\nexport const removeNode = <T extends Node>(node: T) => node.parentNode?.removeChild(node);\n\n// 复制样式\nexport const cloneStyle = <T extends Element>(target: T, origin: T) => {\n  const style = window.getComputedStyle(origin, null);\n  target.setAttribute('style', style.cssText);\n};\n\nexport const setProperty = <T extends ElementCSSInlineStyle>(\n  target: T,\n  propertyName: string,\n  value: number | string,\n  priority?: string | null\n) => {\n  target.style.setProperty(propertyName, String(value), priority);\n};\n","import { isIE, appendNode, importNode, removeNode, cloneStyle, isNode, setProperty } from './utils';\n\ninterface Options {\n  documentTitle: string;\n  mediaPrintStyle: string;\n  zoom: number | string;\n}\n\nexport type PrintOptions = Partial<Options>;\n\nconst createContainer = (options: PrintOptions): HTMLIFrameElement => {\n  const { documentTitle } = options;\n  const container = window.document.createElement('iframe');\n  container.setAttribute('style', ' position: absolute; height: 0; width: 0; visibility: hidden;');\n  const title = documentTitle ?? window.document.title;\n  container.setAttribute('srcdoc', `<html><head><title>${title}</title></head></html>`);\n  return container;\n};\n\nconst createStyleNode = (style: string) => {\n  const node = window.document.createElement('style');\n  node.innerHTML = `@media print {${style}}`;\n  return node;\n};\n\nconst NodeFilterType = window.NodeFilter.SHOW_ELEMENT;\n/** 复制需要打印的 DOM 元素的所有样式 */\nconst cloneDocumentStyle = (printDocument: Document, dom: Node) => {\n  cloneStyle(printDocument.body, window.document.body);\n  const originIterator = window.document.createNodeIterator(dom, NodeFilterType);\n  const printIterator = printDocument.createNodeIterator(printDocument.body, NodeFilterType);\n\n  let node = printIterator.nextNode();\n  while (node) {\n    node = printIterator.nextNode();\n    const originNode = originIterator.nextNode();\n    if (originNode && node) cloneStyle(node as Element, originNode as Element);\n  }\n};\n\nconst getNode = (target: unknown): Node => {\n  if (isNode(target)) return target;\n  if (typeof target === 'string') {\n    const dom = window.document.querySelector(target);\n    if (dom) return dom;\n  }\n  throw new Error('Invalid HTML element');\n};\n\n/** reset html zoom */\nconst setDocumentZoom = (document: Document, zoom: number | string = 1) => {\n  setProperty(document.documentElement, 'zoom', zoom);\n};\n\nconst performPrint = (container: HTMLIFrameElement) =>\n  new Promise<void>((resolve, reject) => {\n    container.focus();\n    const contentWindow = container.contentWindow;\n    if (!contentWindow) return reject(new Error('Not found window'));\n    if (isIE()) {\n      try {\n        contentWindow.document.execCommand('print', false);\n      } catch {\n        contentWindow.print();\n      }\n    } else {\n      contentWindow.print();\n    }\n\n    contentWindow.onafterprint = () => {\n      resolve();\n      /** destroy dom */\n      contentWindow.close();\n      removeNode(container);\n    };\n  });\n\nconst lightPrint = <T extends Node | string = string>(target: T, options: PrintOptions = {}) =>\n  new Promise<void>((resolve, reject) => {\n    const dom = getNode(target);\n    const container = createContainer(options);\n    appendNode(window.document.body, container);\n    container.addEventListener('load', () => {\n      const printDocument = container.contentWindow?.document ?? container.contentDocument;\n      if (!printDocument) return reject(new Error('Not found document'));\n\n      setDocumentZoom(printDocument, options.zoom);\n      if (options.mediaPrintStyle) {\n        const styleNode = createStyleNode(options.mediaPrintStyle);\n        appendNode(printDocument.head, styleNode);\n      }\n      appendNode(printDocument.body, importNode(printDocument, dom));\n      cloneDocumentStyle(printDocument, dom);\n      /** run print handler */\n      performPrint(container).then(resolve).catch(reject);\n    });\n  });\n\nexport default lightPrint;\n"],"names":[],"mappings":";;;;;;;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;ymBCrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}