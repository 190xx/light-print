export declare const isIE: () => boolean;
export declare const isString: (val: unknown) => val is string;
export declare const isNode: (target: unknown) => target is Node;
export declare const appendNode: <T extends Node>(parent: T, child: T) => T;
export declare const importNode: <T extends Node>(document: Document, node: T) => T;
export declare const removeNode: <T extends Node>(node: T) => T | undefined;
export declare const createNodeIterator: (root: Node, filter?: NodeFilter | undefined) => NodeIterator;
export declare const cloneStyle: <T extends Element>(target: T, origin: T) => void;
export declare const setProperty: <T extends ElementCSSInlineStyle>(target: T, propertyName: string, value: string | number, priority?: string | undefined) => void;
export declare const getDocument: (target: HTMLIFrameElement) => Document | null;
export declare const getNode: (containerOrSelector: unknown) => Node | undefined;
export declare const bindOnceEvent: <T extends EventTarget, K extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "change" | "message" | "messageerror" | "input" | "select" | "readystatechange" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "orientationchange" | "afterprint" | "beforeprint" | "beforeunload" | "hashchange" | "languagechange" | "offline" | "online" | "pagehide" | "pageshow" | "popstate" | "rejectionhandled" | "storage" | "unhandledrejection" | "unload" | "compassneedscalibration" | "devicelight" | "devicemotion" | "deviceorientation" | "deviceorientationabsolute" | "mousewheel" | "MSGestureChange" | "MSGestureDoubleTap" | "MSGestureEnd" | "MSGestureHold" | "MSGestureStart" | "MSGestureTap" | "MSInertiaStart" | "MSPointerCancel" | "MSPointerDown" | "MSPointerEnter" | "MSPointerLeave" | "MSPointerMove" | "MSPointerOut" | "MSPointerOver" | "MSPointerUp" | "vrdisplayactivate" | "vrdisplayblur" | "vrdisplayconnect" | "vrdisplaydeactivate" | "vrdisplaydisconnect" | "vrdisplayfocus" | "vrdisplaypointerrestricted" | "vrdisplaypointerunrestricted" | "vrdisplaypresentchange">(el: T, eventName: K, listener: (event: WindowEventMap[K]) => void, options?: boolean | AddEventListenerOptions | undefined) => void;
